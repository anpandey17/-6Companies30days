class Solution {
public:
  bool dfs(int i,vector<int>&vis,vector<int>&tvis,vector<vector<int>>&v)
    {
        vis[i]=1;
        tvis[i]=1;
        
        bool ans=true;
        
        for(auto a:v[i])
        {
            if(tvis[a])
            ans=false;
            
            if(vis[a])
                continue;
            
            ans=ans && dfs(a,vis,tvis,v);
                 
        }
        
        tvis[i]=0;
        return ans;
    }
    bool canFinish(int n, vector<vector<int>>& prerequisites) {
         vector<vector<int>> v(n);
        
        for(auto a:prerequisites)
        {
            int c1=a[0];
            int c2=a[1];
            
            v[c1].push_back(c2);
        }
        
        vector<int> vis(n,0),tvis(n,0);
        bool flag=true;
        
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                flag=flag && dfs(i,vis,tvis,v);
            }
        }
        
        return flag;
        
    }
    bool dfsLoopDetection(const vector<vector<int>>& graph, vector<bool>& visited, int node, unordered_set<int>& startNodes) {
    visited[node] = true;
    for (int neighbor: graph[node]) {
        if (visited[neighbor]) return true;
        if (dfsLoopDetection(graph, visited, neighbor, startNodes)) return true;
    }
    visited[node] = false;
    startNodes.erase(node);
    return false;
}
};
